from apiclient.discovery import build
from oauth2client.service_account import ServiceAccountCredentials
import datetime


SCOPES = ['https://www.googleapis.com/auth/analytics.readonly']
KEY_FILE_LOCATION = '/Users/yohaneschristianto/Documents/DataRanger/prod-datarangers-45e838480631.json'
VIEW_ID = '43864393'


def initialize_analyticsreporting():
  credentials = ServiceAccountCredentials.from_json_keyfile_name(
      KEY_FILE_LOCATION, SCOPES)

  analytics = build('analyticsreporting', 'v4', credentials=credentials)

  return analytics


def get_report(analytics):

  return analytics.reports().batchGet(
      body={
        'reportRequests': [
        {
          'viewId': VIEW_ID,
          # 'dateRanges': [{'startDate': '7daysAgo', 'endDate': 'yesterday'}],
          'dateRanges': [{'startDate': '2019-09-01', 'endDate': '2019-09-30'}],
          'metrics': [{'expression': 'ga:sessions'}],
          'dimensions': [{'name': 'ga:date'}]
        }]
      }
  ).execute()


def print_response(response):
  for report in response.get('reports', []):
    columnHeader = report.get('columnHeader', {})
    dimensionHeaders = columnHeader.get('dimensions', [])
    metricHeaders = columnHeader.get('metricHeader', {}).get('metricHeaderEntries', [])

    for row in report.get('data', {}).get('rows', []):
      dimensions = row.get('dimensions', [])
      dateRangeValues = row.get('metrics', [])

      for header, dimension in zip(dimensionHeaders, dimensions):
        print(header + ': ' + dimension)

      for i, values in enumerate(dateRangeValues):
        print 'Date range: ' + str(i)
        for metricHeader, value in zip(metricHeaders, values.get('values')):
          print(metricHeader.get('name') + ': ' + value)

def get_data(response):
  for report in response.get('reports', []):
    columnHeader = report.get('columnHeader', {})
    dimensionHeaders = columnHeader.get('dimensions', [])
    metricHeaders = columnHeader.get('metricHeader', {}).get('metricHeaderEntries', [])

    for row in report.get('data', {}).get('rows', []):
      date_string = row['dimensions'][0].__str__()
      date = datetime.datetime.strptime(date_string, "%Y%m%d").isoformat()
      data = {"ga_session_count":int(row['metrics'][0]['values'][0]),"ga_date":date[:10]}
      print(data)


def main():
  analytics = initialize_analyticsreporting()
  response = get_report(analytics)
  # print_response(response)
  asd = get_data(response)
  print(asd)

if __name__ == '__main__':
  main()
